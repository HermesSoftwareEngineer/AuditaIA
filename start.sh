#!/usr/bin/env bash
# Start script para Render - Simplificado

set -o errexit

echo "üöÄ Iniciando AuditaIA..."

# Definir vari√°veis de ambiente
export FLASK_APP=src.app:create_app
export FLASK_ENV=production

# Executar migra√ß√µes se DATABASE_URL estiver dispon√≠vel
if [ "$DATABASE_URL" ]; then
    echo "üìä Executando migra√ß√µes..."
    cd src
    python -c "
try:
    from app import create_app
    from flask_migrate import upgrade
    app = create_app()
    with app.app_context():
        upgrade()
    print('‚úÖ Migra√ß√µes conclu√≠das')
except Exception as e:
    print(f'‚ö†Ô∏è Erro nas migra√ß√µes: {e}')
" || echo "‚ö†Ô∏è Migra√ß√µes falharam"
    cd ..
fi

# Iniciar aplica√ß√£o
echo "üåê Iniciando servidor..."
exec gunicorn --bind 0.0.0.0:$PORT --workers 2 --timeout 60 src.app:create_app
with app.app_context():
    try:
        admin = User.query.filter_by(username='admin').first()
        if not admin:
            admin = User(
                username='admin', 
                email=os.environ.get('ADMIN_EMAIL', 'admin@auditaia.com'), 
                user_type='admin'
            )
            admin.set_password(os.environ.get('ADMIN_PASSWORD', 'admin123'))
            db.session.add(admin)
            db.session.commit()
            print('‚úÖ Usu√°rio admin criado')
        else:
            print('‚ÑπÔ∏è Usu√°rio admin j√° existe')
    except Exception as e:
        print(f'‚ö†Ô∏è Erro ao criar admin: {e}')
" || echo "‚ö†Ô∏è Erro na cria√ß√£o do usu√°rio admin"
    cd ..
fi

# Iniciar aplica√ß√£o com Gunicorn
echo "üåê Iniciando servidor..."
exec gunicorn --bind 0.0.0.0:$PORT --workers 2 --timeout 60 --keep-alive 5 --max-requests 1000 --preload src.app:create_app
